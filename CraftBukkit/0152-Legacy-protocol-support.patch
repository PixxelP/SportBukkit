From 24c1d32d6ce89393aa5f9b0867a72cc732ce7970 Mon Sep 17 00:00:00 2001
From: Jedediah Smith <jedediah@silencegreys.com>
Date: Sat, 14 May 2016 23:40:38 -0400
Subject: [PATCH] Legacy protocol support


diff --git a/src/main/java/net/minecraft/server/DataWatcher.java b/src/main/java/net/minecraft/server/DataWatcher.java
index 286a90b..484d43e 100644
--- a/src/main/java/net/minecraft/server/DataWatcher.java
+++ b/src/main/java/net/minecraft/server/DataWatcher.java
@@ -15,6 +15,7 @@ import javax.annotation.Nullable;
 import org.apache.commons.lang3.ObjectUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.craftbukkit.protocol.ProtocolTranslator; // SportBukkit
 
 public class DataWatcher {
 
@@ -86,6 +87,7 @@ public class DataWatcher {
 
     private <T> void registerObject(DataWatcherObject<T> datawatcherobject, Object t0) { // CraftBukkit Object
         DataWatcher.Item datawatcher_item = new DataWatcher.Item(datawatcherobject, t0);
+        datawatcher_item.entityClass = b.getClass(); // SportBukkit
 
         this.e.writeLock().lock();
         this.d.put(Integer.valueOf(datawatcherobject.a()), datawatcher_item);
@@ -219,7 +221,11 @@ public class DataWatcher {
         if (i < 0) {
             throw new EncoderException("Unknown serializer type " + datawatcherobject.b());
         } else {
-            packetdataserializer.writeByte(datawatcherobject.a());
+            // SportBukkit start - legacy protocol translation
+            int index = ProtocolTranslator.metadataIndex(false, packetdataserializer.protocolVersion, datawatcher_item.entityClass, datawatcherobject.a());
+            if(index < 0) return;
+            packetdataserializer.writeByte(index);
+            // SportBukkit end
             packetdataserializer.d(i);
             datawatcherobject.b().a(packetdataserializer, datawatcher_item.b());
         }
@@ -259,6 +265,7 @@ public class DataWatcher {
 
     public static class Item<T> {
 
+        public Class<? extends Entity> entityClass = Entity.class; // SportBukkit
         private final DataWatcherObject<T> a;
         private T b;
         private boolean c;
@@ -304,6 +311,7 @@ public class DataWatcher {
             }
 
             final Item<T> copy = new Item<T>(this.a(), value);
+            copy.entityClass = this.entityClass;
             copy.a(this.c());
             return copy;
         }
diff --git a/src/main/java/net/minecraft/server/HandshakeListener.java b/src/main/java/net/minecraft/server/HandshakeListener.java
index 3ff8c0c..eb55ad7 100644
--- a/src/main/java/net/minecraft/server/HandshakeListener.java
+++ b/src/main/java/net/minecraft/server/HandshakeListener.java
@@ -65,7 +65,7 @@ public class HandshakeListener implements PacketHandshakingInListener {
                 chatcomponenttext = new ChatComponentText("Outdated server! I\'m still on 1.10.2");
                 this.b.sendPacket(new PacketLoginOutDisconnect(chatcomponenttext));
                 this.b.close(chatcomponenttext);
-            } else if (packethandshakinginsetprotocol.b() < 210) {
+            } else if (packethandshakinginsetprotocol.b() < 107) { // SportBukkit
                 chatcomponenttext = new ChatComponentText("Outdated client! Please use 1.10.2");
                 this.b.sendPacket(new PacketLoginOutDisconnect(chatcomponenttext));
                 this.b.close(chatcomponenttext);
diff --git a/src/main/java/net/minecraft/server/PacketDataSerializer.java b/src/main/java/net/minecraft/server/PacketDataSerializer.java
index a24c2c0..892d0e5 100644
--- a/src/main/java/net/minecraft/server/PacketDataSerializer.java
+++ b/src/main/java/net/minecraft/server/PacketDataSerializer.java
@@ -22,9 +22,12 @@ import java.util.UUID;
 import javax.annotation.Nullable;
 
 import org.bukkit.craftbukkit.inventory.CraftItemStack; // CraftBukkit
+import org.bukkit.craftbukkit.protocol.ProtocolTranslator; // SportBukkit
 
 public class PacketDataSerializer extends ByteBuf {
 
+    public int protocolVersion = 210; // SportBukkit
+
     private final ByteBuf a;
 
     public PacketDataSerializer(ByteBuf bytebuf) {
@@ -236,6 +239,10 @@ public class PacketDataSerializer extends ByteBuf {
     public PacketDataSerializer a(@Nullable ItemStack itemstack) {
         if (itemstack == null || itemstack.getItem() == null) { // CraftBukkit - NPE fix itemstack.getItem()
             this.writeShort(-1);
+        // SportBukkit start - legacy clients will crash if they get an unknown item
+        } else if(!ProtocolTranslator.hasItem(protocolVersion, itemstack.getItem())) {
+            this.writeShort(-1);
+        // SportBukkit end
         } else {
             this.writeShort(Item.getId(itemstack.getItem()));
             this.writeByte(itemstack.count);
diff --git a/src/main/java/net/minecraft/server/PacketDecoder.java b/src/main/java/net/minecraft/server/PacketDecoder.java
index fc22c20..d892501 100644
--- a/src/main/java/net/minecraft/server/PacketDecoder.java
+++ b/src/main/java/net/minecraft/server/PacketDecoder.java
@@ -9,6 +9,7 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.Marker;
 import org.apache.logging.log4j.MarkerManager;
+import org.bukkit.craftbukkit.protocol.ProtocolTranslator; // SportBukkit
 
 public class PacketDecoder extends ByteToMessageDecoder {
 
@@ -23,7 +24,21 @@ public class PacketDecoder extends ByteToMessageDecoder {
     protected void decode(ChannelHandlerContext channelhandlercontext, ByteBuf bytebuf, List<Object> list) throws Exception {
         if (bytebuf.readableBytes() != 0) {
             PacketDataSerializer packetdataserializer = new PacketDataSerializer(bytebuf);
+
+            // SportBukkit start - set protocol version
+            final NetworkManager networkManager = channelhandlercontext.pipeline().get(NetworkManager.class);
+            if(networkManager != null) {
+                packetdataserializer.protocolVersion = networkManager.protocolVersion;
+            }
+            // SportBukkit end
+
             int i = packetdataserializer.g();
+
+            // SportBukkit start - translate packet ID
+            i = ProtocolTranslator.packetId(true, packetdataserializer.protocolVersion, i);
+            if(i < 0) return;
+            // SportBukkit end
+
             Packet packet = ((EnumProtocol) channelhandlercontext.channel().attr(NetworkManager.c).get()).a(this.c, i);
 
             if (packet == null) {
diff --git a/src/main/java/net/minecraft/server/PacketEncoder.java b/src/main/java/net/minecraft/server/PacketEncoder.java
index f4066bd..ec493e7 100644
--- a/src/main/java/net/minecraft/server/PacketEncoder.java
+++ b/src/main/java/net/minecraft/server/PacketEncoder.java
@@ -8,6 +8,7 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.Marker;
 import org.apache.logging.log4j.MarkerManager;
+import org.bukkit.craftbukkit.protocol.ProtocolTranslator; // SportBukkit
 
 public class PacketEncoder extends MessageToByteEncoder<Packet<?>> {
 
@@ -31,6 +32,15 @@ public class PacketEncoder extends MessageToByteEncoder<Packet<?>> {
         } else {
             PacketDataSerializer packetdataserializer = new PacketDataSerializer(bytebuf);
 
+            // SportBukkit start
+            final NetworkManager networkManager = channelhandlercontext.pipeline().get(NetworkManager.class);
+            if(networkManager != null) {
+                packetdataserializer.protocolVersion = networkManager.protocolVersion;
+                integer = ProtocolTranslator.packetId(false, packetdataserializer.protocolVersion, integer);
+                if(integer < 0) return;
+            }
+            // SportBukkit end
+
             packetdataserializer.d(integer.intValue());
 
             try {
diff --git a/src/main/java/net/minecraft/server/PacketPlayInResourcePackStatus.java b/src/main/java/net/minecraft/server/PacketPlayInResourcePackStatus.java
index 512b3e4..8bb9a41 100644
--- a/src/main/java/net/minecraft/server/PacketPlayInResourcePackStatus.java
+++ b/src/main/java/net/minecraft/server/PacketPlayInResourcePackStatus.java
@@ -13,10 +13,20 @@ public class PacketPlayInResourcePackStatus implements Packet<PacketListenerPlay
     }
 
     public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        // SportBukkit start
+        if(packetdataserializer.protocolVersion < 204) {
+            packetdataserializer.e(40);
+        }
+        // SportBukkit end
         this.status = (PacketPlayInResourcePackStatus.EnumResourcePackStatus) packetdataserializer.a(PacketPlayInResourcePackStatus.EnumResourcePackStatus.class);
     }
 
     public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        // SportBukkit start
+        if(packetdataserializer.protocolVersion < 204) {
+            packetdataserializer.a("0123456789012345678901234567890123456789");
+        }
+        // SportBukkit end
         packetdataserializer.a((Enum) this.status);
     }
 
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutCustomSoundEffect.java b/src/main/java/net/minecraft/server/PacketPlayOutCustomSoundEffect.java
index 8a19c73..73ca23b 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutCustomSoundEffect.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutCustomSoundEffect.java
@@ -33,7 +33,13 @@ public class PacketPlayOutCustomSoundEffect implements Packet<PacketListenerPlay
         this.d = packetdataserializer.readInt();
         this.e = packetdataserializer.readInt();
         this.f = packetdataserializer.readFloat();
-        this.g = packetdataserializer.readFloat();
+        // SportBukkit start
+        if(packetdataserializer.protocolVersion < 201) {
+            this.g = ((float) packetdataserializer.readUnsignedByte()) / 63f;
+        } else {
+            this.g = packetdataserializer.readFloat();
+        }
+        // SportBukkit end
     }
 
     public void b(PacketDataSerializer packetdataserializer) throws IOException {
@@ -43,7 +49,13 @@ public class PacketPlayOutCustomSoundEffect implements Packet<PacketListenerPlay
         packetdataserializer.writeInt(this.d);
         packetdataserializer.writeInt(this.e);
         packetdataserializer.writeFloat(this.f);
-        packetdataserializer.writeFloat(this.g);
+        // SportBukkit start
+        if(packetdataserializer.protocolVersion < 201) {
+            packetdataserializer.writeByte((byte) (this.g * 63f));
+        } else {
+            packetdataserializer.writeFloat(this.g);
+        }
+        // SportBukkit end
     }
 
     public void a(PacketListenerPlayOut packetlistenerplayout) {
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutLogin.java b/src/main/java/net/minecraft/server/PacketPlayOutLogin.java
index 9a973d5..0204a68 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutLogin.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutLogin.java
@@ -54,7 +54,13 @@ public class PacketPlayOutLogin implements Packet<PacketListenerPlayOut> {
         }
 
         packetdataserializer.writeByte(i);
-        packetdataserializer.writeInt(this.d);
+        // SportBukkit start
+        if (packetdataserializer.protocolVersion < 108) {
+            packetdataserializer.writeByte(this.d);
+        } else {
+            packetdataserializer.writeInt(this.d);
+        }
+        // SportBukkit end
         packetdataserializer.writeByte(this.e.a());
         packetdataserializer.writeByte(this.f);
         packetdataserializer.a(this.g.name());
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java b/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
index 925e27d..0cc7e95 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
@@ -75,6 +75,7 @@ public class PacketPlayOutMapChunk implements Packet<PacketListenerPlayOut> {
         packetdataserializer.d(this.c);
         packetdataserializer.d(this.d.length);
         packetdataserializer.writeBytes(this.d);
+        if(packetdataserializer.protocolVersion < 110) return; // SportBukkit
         packetdataserializer.d(this.e.size());
         Iterator iterator = this.e.iterator();
 
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutNamedSoundEffect.java b/src/main/java/net/minecraft/server/PacketPlayOutNamedSoundEffect.java
index 030f02f..671791c 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutNamedSoundEffect.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutNamedSoundEffect.java
@@ -2,6 +2,7 @@ package net.minecraft.server;
 
 import java.io.IOException;
 import org.apache.commons.lang3.Validate;
+import org.bukkit.craftbukkit.protocol.ProtocolTranslator; // SportBukkit
 
 public class PacketPlayOutNamedSoundEffect implements Packet<PacketListenerPlayOut> {
 
@@ -27,23 +28,46 @@ public class PacketPlayOutNamedSoundEffect implements Packet<PacketListenerPlayO
     }
 
     public void a(PacketDataSerializer packetdataserializer) throws IOException {
-        this.a = (SoundEffect) SoundEffect.a.getId(packetdataserializer.g());
+        // SportBukkit start - translate sound ID
+        final int id = ProtocolTranslator.soundId(true, packetdataserializer.protocolVersion, packetdataserializer.g());
+        this.a = id < 0 ? SoundEffects.a : (SoundEffect) SoundEffect.a.getId(packetdataserializer.g());
+        // SportBukkit end
+
         this.b = (SoundCategory) packetdataserializer.a(SoundCategory.class);
         this.c = packetdataserializer.readInt();
         this.d = packetdataserializer.readInt();
         this.e = packetdataserializer.readInt();
         this.f = packetdataserializer.readFloat();
-        this.g = packetdataserializer.readFloat();
+        if(id < 0) this.f = 0f; // SportBukkit - mute missing sounds
+
+        // SportBukkit start - pitch field byte -> float
+        if(packetdataserializer.protocolVersion < 201) {
+            this.g = ((float) packetdataserializer.readUnsignedByte()) / 63f;
+        } else {
+            this.g = packetdataserializer.readFloat();
+        }
+        // SportBukkit end
     }
 
     public void b(PacketDataSerializer packetdataserializer) throws IOException {
-        packetdataserializer.d(SoundEffect.a.a(this.a)); // SportBukkit - fix decompile error
+        // SportBukkit start - translate sound ID
+        final int id = ProtocolTranslator.soundId(false, packetdataserializer.protocolVersion, SoundEffect.a.a(this.a));
+        packetdataserializer.d(id < 0 ? 0 : id);
+        // SportBukkit end
+
         packetdataserializer.a((Enum) this.b);
         packetdataserializer.writeInt(this.c);
         packetdataserializer.writeInt(this.d);
         packetdataserializer.writeInt(this.e);
-        packetdataserializer.writeFloat(this.f);
-        packetdataserializer.writeFloat(this.g);
+        packetdataserializer.writeFloat(id < 0 ? 0f : this.f); // SportBukkit - mute missing sounds
+
+        // SportBukkit start - pitch field byte -> float
+        if(packetdataserializer.protocolVersion < 201) {
+            packetdataserializer.writeByte((byte) (this.g * 63f));
+        } else {
+            packetdataserializer.writeFloat(this.g);
+        }
+        // SportBukkit end
     }
 
     public void a(PacketListenerPlayOut packetlistenerplayout) {
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutTileEntityData.java b/src/main/java/net/minecraft/server/PacketPlayOutTileEntityData.java
index b30c97e..47c02b6 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutTileEntityData.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutTileEntityData.java
@@ -23,6 +23,18 @@ public class PacketPlayOutTileEntityData implements Packet<PacketListenerPlayOut
     }
 
     public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        // SportBukkit start - Sign Update packet replaced with TileEntityData packet
+        if(b == 9 && packetdataserializer.protocolVersion < 110) {
+            // Fake a sign update packet
+            packetdataserializer.writerIndex(packetdataserializer.writerIndex() - 1);
+            packetdataserializer.d(0x46); // rewrite the packet ID
+            packetdataserializer.a(this.a);
+            for(int line = 0; line < 4; line++) {
+                packetdataserializer.a(IChatBaseComponent.ChatSerializer.a(c.getString("Text" + (line + 1))));
+            }
+            return;
+        }
+        // SportBukkit end
         packetdataserializer.a(this.a);
         packetdataserializer.writeByte((byte) this.b);
         packetdataserializer.a(this.c);
diff --git a/src/main/java/net/minecraft/server/PlayerChunk.java b/src/main/java/net/minecraft/server/PlayerChunk.java
index dd40e98..a814ee1 100644
--- a/src/main/java/net/minecraft/server/PlayerChunk.java
+++ b/src/main/java/net/minecraft/server/PlayerChunk.java
@@ -36,6 +36,33 @@ public class PlayerChunk {
     };
     // CraftBukkit end
 
+    // SportBukkit start
+    private List<Packet> getTileEntityPackets(int sectionMask) {
+        final List<Packet> packets = new java.util.ArrayList<Packet>();
+        for(TileEntity tile : chunk.getTileEntities().values()) {
+            if((sectionMask & (1 << (tile.getPosition().getY() >> 4))) != 0) {
+                final Packet packet = tile.getUpdatePacket();
+                if(packet != null) packets.add(packet);
+            }
+        }
+        return packets;
+    }
+
+    private void sendLegacyTileEntityUpdates(int sectionMask, java.util.Collection<EntityPlayer> players) {
+        if(sectionMask == 0 || players.isEmpty()) return;
+        List<Packet> packets = null;
+        for(EntityPlayer viewer : players) {
+            if(viewer.protocolVersion < 110) {
+                if(packets == null) {
+                    packets = getTileEntityPackets(sectionMask);
+                    if(packets.isEmpty()) return;
+                }
+                for(Packet packet : packets) viewer.playerConnection.sendPacket(packet);
+            }
+        }
+    }
+    // SportBukkit end
+
     public PlayerChunk(PlayerChunkMap playerchunkmap, int i, int j) {
         this.playerChunkMap = playerchunkmap;
         this.location = new ChunkCoordIntPair(i, j);
@@ -138,6 +165,7 @@ public class PlayerChunk {
                 this.playerChunkMap.getWorld().getTracker().a(entityplayer, this.chunk);
             }
 
+            sendLegacyTileEntityUpdates(0xffff, this.c); // SportBukkit
             return true;
         }
     }
@@ -146,6 +174,7 @@ public class PlayerChunk {
         if (this.done) {
             entityplayer.playerConnection.sendPacket(new PacketPlayOutMapChunk(this.chunk, '\uffff'));
             this.playerChunkMap.getWorld().getTracker().a(entityplayer, this.chunk);
+            sendLegacyTileEntityUpdates(0xffff, java.util.Collections.singleton(entityplayer)); // SportBukkit
         }
     }
 
@@ -209,6 +238,7 @@ public class PlayerChunk {
                     }
                 } else if (this.dirtyCount == 64) {
                     this.a((Packet) (new PacketPlayOutMapChunk(this.chunk, this.h)));
+                    sendLegacyTileEntityUpdates(this.h, this.c); // SportBukkit
                 } else {
                     this.a((Packet) (new PacketPlayOutMultiBlockChange(this.dirtyCount, this.dirtyBlocks, this.chunk)));
 
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index dee4207..f4b8c85 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -1259,6 +1259,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                                 replacedMetadataPacket.a = metadataPacket.a;
                                 replacedMetadataPacket.b = new ArrayList(metadataPacket.b);
                                 final DataWatcher.Item replacementItem = new DataWatcher.Item(flagsItem.a(), (byte) (entityFlags & ~0x20));
+                                replacementItem.entityClass = flagsItem.entityClass;
                                 replacementItem.a(flagsItem.c());
                                 replacedMetadataPacket.b.set(i, replacementItem); // Clear invisibility
 
@@ -2607,10 +2608,13 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                                 tileentitystructure.b(EnumBlockRotation.valueOf(s6));
                                 tileentitystructure.b(packetdataserializer.e(128));
                                 tileentitystructure.a(packetdataserializer.readBoolean());
+                                if(packetdataserializer.protocolVersion >= 201) { // SportBukkit - legacy proto translation
                                 tileentitystructure.e(packetdataserializer.readBoolean());
                                 tileentitystructure.f(packetdataserializer.readBoolean());
+                                if(packetdataserializer.protocolVersion >= 202) { // SportBukkit
                                 tileentitystructure.a(MathHelper.a(packetdataserializer.readFloat(), 0.0F, 1.0F));
                                 tileentitystructure.a(packetdataserializer.h());
+                                }} // SportBukkit
                                 String s7 = tileentitystructure.d();
 
                                 if (b1 == 2) {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 05b00df..de72c5a 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1823,6 +1823,6 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
 
     @Override
     public Set<Integer> getProtocolVersions() {
-        return ImmutableSet.of(210);
+        return ImmutableSet.of(107, 108, 109, 110, 201, 202, 203, 204, 205, 210);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/protocol/ProtocolTranslator.java b/src/main/java/org/bukkit/craftbukkit/protocol/ProtocolTranslator.java
new file mode 100644
index 0000000..965e1f5
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/protocol/ProtocolTranslator.java
@@ -0,0 +1,130 @@
+package org.bukkit.craftbukkit.protocol;
+
+import java.util.Map;
+
+import com.google.common.collect.ImmutableMap;
+import net.minecraft.server.Entity;
+import net.minecraft.server.EntityAreaEffectCloud;
+import net.minecraft.server.Item;
+import net.minecraft.server.MinecraftKey;
+
+/**
+ * Translate indexes between the given protocol and the current protocol.
+ * If forward is true, translate from old to new.
+ * If forward is false, translate from new to old.
+ *
+ * If -1 is returned, the index does not exist in the output protocol.
+ */
+public final class ProtocolTranslator {
+    private ProtocolTranslator() {}
+
+    /**
+     * NOTE: you should apply changes in descending order, so they don't
+     * affect each other. This could probably be done better.
+     */
+    private static class IdTranslator {
+
+        final boolean forward;
+        int id;
+
+        IdTranslator(boolean forward, int id) {
+            this.forward = forward;
+            this.id = id;
+        }
+
+        void change(int first, int count, boolean insert) {
+            if(id < 0) return;
+
+            if(insert ^ !forward) {
+                // Insert
+                if(id >= first) {
+                    id += count;
+                }
+            } else {
+                // Remove
+                final int last = first + count;
+                if(id >= first && id < last) {
+                    id = -1;
+                } else if(id >= last) {
+                    id -= count;
+                }
+            }
+        }
+
+        void change(int changed, boolean insert) {
+            change(changed, 1, insert);
+        }
+
+        void insert(int first, int count) {
+            change(first, count, true);
+        }
+
+        void insert(int inserted) {
+            change(inserted, true);
+        }
+
+        void remove(int first, int count) {
+            change(first, count, false);
+        }
+
+        void remove(int removed) {
+            change(removed, false);
+        }
+    }
+
+    public static int packetId(boolean forward, int proto, int id) {
+        final IdTranslator trans = new IdTranslator(forward, id);
+        if(proto < 110) {
+            trans.remove(0x46); // Remove Update Sign
+        }
+        return trans.id;
+    }
+
+    public static int metadataIndex(boolean forward, int proto, Class<? extends Entity> entity, int index) {
+        final IdTranslator trans = new IdTranslator(forward, index);
+        if(proto < 201) {
+            if(EntityAreaEffectCloud.class.isAssignableFrom(entity)) {
+                trans.insert(10, 2); // Add ParticleParam fields
+            }
+            trans.insert(5); // Add no-gravity flag to Entity
+            /*
+            EntityPolarBear
+                13 boolean Angry
+            */
+        }
+        return trans.id;
+    }
+
+    public static int soundId(boolean forward, int proto, int id) {
+        final IdTranslator trans = new IdTranslator(forward, id);
+        if(proto < 108) {
+            trans.insert(434); // item.elytra.flying
+        }
+        if(proto < 201) {
+            trans.insert(387, 4); // entity.wither_skeleton.*
+            trans.insert(365, 4); // entity.stray.*
+            trans.insert(301, 6); // entity.polar_bear.*
+            trans.insert(249, 4); // entity.husk.*
+            trans.insert(24); // block.enchantment_table.use
+        }
+        return trans.id;
+    }
+
+    private static Item item(String key) {
+        return Item.REGISTRY.get(new MinecraftKey(key));
+    }
+
+    private static final Map<Item, Integer> ITEM_PROTO = ImmutableMap.<Item, Integer>builder()
+        .put(item("magma"), 201)
+        .put(item("nether_wart_block"), 201)
+        .put(item("red_nether_brick"), 201)
+        .put(item("bone_block"), 201)
+        .put(item("structure_void"), 201)
+        .put(item("structure_block"), 201) // block was in 1.9, but not an item until 1.10
+        .build();
+
+    public static boolean hasItem(int proto, Item item) {
+        final Integer first = ITEM_PROTO.get(item);
+        return first == null || first <= proto;
+    }
+}
-- 
1.9.0

