From 672ebf4552f01e850cd684ef6fab3a4b5b4bbac7 Mon Sep 17 00:00:00 2001
From: Jedediah Smith <jedediah@silencegreys.com>
Date: Sat, 18 Jun 2016 08:18:33 -0400
Subject: [PATCH] Block physics API


diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index b121686..478740a 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -377,6 +377,14 @@ public abstract class World implements IBlockAccess {
         }
 
         if (!this.isClientSide && (flag & 1) != 0) {
+            // SportBukkit start - Split off another method for the physics alone
+            updatePhysicsAndRedstone(blockposition, oldBlock, newBlock);
+        }
+    }
+
+    public void updatePhysicsAndRedstone(BlockPosition blockposition, IBlockData oldBlock, IBlockData newBlock) {
+        {
+        // SportBukkit end
             this.update(blockposition, oldBlock.getBlock());
             if (newBlock.n()) {
                 this.updateAdjacentComparators(blockposition, newBlock.getBlock());
@@ -493,6 +501,7 @@ public abstract class World implements IBlockAccess {
 
     }
 
+    public void applySelfPhysics(BlockPosition position, Block cause) { e(position, cause); } // SportBukkit - method alias
     public void e(BlockPosition blockposition, final Block block) {
         if (!this.isClientSide) {
             IBlockData iblockdata = this.getType(blockposition);
@@ -3005,7 +3014,14 @@ public abstract class World implements IBlockAccess {
         while (iterator.hasNext()) {
             EnumDirection enumdirection = (EnumDirection) iterator.next();
             BlockPosition blockposition1 = blockposition.shift(enumdirection);
+            // SportBukkit start - extract method
+            updateComparator(blockposition1, block, enumdirection);
+        }
+    }
 
+    public void updateComparator(BlockPosition blockposition1, Block block, EnumDirection enumdirection) {
+        {
+            // SportBukkit end
             if (this.isLoaded(blockposition1)) {
                 IBlockData iblockdata = this.getType(blockposition1);
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
index b69aff6..bc7e949 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
@@ -20,6 +20,7 @@ import org.bukkit.craftbukkit.CraftChunk;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.inventory.ItemStack;
+import org.bukkit.material.MaterialData;
 import org.bukkit.metadata.MetadataValue;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.util.BlockVector;
@@ -532,4 +533,37 @@ public class CraftBlock implements Block {
     public RayBlockIntersection rayTrace(Location start, double distance) {
         return rayTrace(start.toVector(), start.toVector().add(start.getDirection().multiply(distance)));
     }
+
+    public net.minecraft.server.Chunk nmsChunk() {
+        return chunk.getHandle();
+    }
+
+    public net.minecraft.server.World nmsWorld() {
+        return nmsChunk().getWorld();
+    }
+
+    public BlockPosition nmsPosition() {
+        return new BlockPosition(x, y, z);
+    }
+
+    @Override
+    public void simulateNeighborChange(BlockFace neighbor, MaterialData before, MaterialData after) {
+        final net.minecraft.server.World world = nmsWorld();
+        final BlockPosition pos = nmsPosition();
+
+        // This is supposed to be functionally equivalent to updatePhysicsAndRedstone,
+        // which uses the before state as the source rather than the after state
+        // (for unknown reasons), so we do the same here.
+        world.applySelfPhysics(pos, CraftMagicNumbers.getBlock(before.getItemType()));
+
+        final net.minecraft.server.Block afterBlock = CraftMagicNumbers.getBlock(after.getItemType());
+        if(afterBlock.isComplexRedstone(CraftMagicNumbers.getBlockData(after))) { // Avoided IBlockProperties.n() due to renaming risk
+            world.updateComparator(pos, afterBlock, blockFaceToNotch(neighbor.getOppositeFace()));
+        }
+    }
+
+    @Override
+    public void simulateChangeForNeighbors(MaterialData before, MaterialData after) {
+        nmsWorld().updatePhysicsAndRedstone(nmsPosition(), CraftMagicNumbers.getBlockData(before), CraftMagicNumbers.getBlockData(after));
+    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index 492c4b5..b3ecbb7 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -10,6 +10,7 @@ import java.util.logging.Logger;
 
 import net.minecraft.server.Block;
 import net.minecraft.server.Blocks;
+import net.minecraft.server.IBlockData;
 import net.minecraft.server.Item;
 import net.minecraft.server.MinecraftKey;
 import net.minecraft.server.MojangsonParseException;
@@ -24,6 +25,7 @@ import org.bukkit.UnsafeValues;
 import org.bukkit.craftbukkit.CraftStatistic;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.inventory.ItemStack;
+import org.bukkit.material.MaterialData;
 import org.bukkit.util.StringUtil;
 
 @SuppressWarnings("deprecation")
@@ -95,6 +97,10 @@ public final class CraftMagicNumbers implements UnsafeValues {
         return block;
     }
 
+    public static IBlockData getBlockData(MaterialData material) {
+        return getBlock(material.getItemType()).fromLegacyData(material.getData());
+    }
+
     @Override
     public Material getMaterialFromInternalName(String name) {
         return getMaterial((Item) Item.REGISTRY.get(new MinecraftKey(name)));
-- 
1.9.0

