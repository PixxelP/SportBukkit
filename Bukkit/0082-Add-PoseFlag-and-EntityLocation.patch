From e13f75beaf004f7dc787fe0693da3f726002900c Mon Sep 17 00:00:00 2001
From: Jedediah Smith <jedediah@silencegreys.com>
Date: Fri, 1 Jul 2016 03:36:15 -0400
Subject: [PATCH] Add PoseFlag and EntityLocation


diff --git a/src/main/java/org/bukkit/EntityLocation.java b/src/main/java/org/bukkit/EntityLocation.java
new file mode 100644
index 0000000..3015e35
--- /dev/null
+++ b/src/main/java/org/bukkit/EntityLocation.java
@@ -0,0 +1,124 @@
+package org.bukkit;
+
+import java.util.Arrays;
+import java.util.EnumSet;
+import java.util.Set;
+
+import org.bukkit.util.EnumUtils;
+import org.bukkit.util.Vector;
+
+public class EntityLocation extends Location {
+
+    private final Vector velocity;
+    private final Set<PoseFlag> poseFlags;
+
+    /**
+     * Create a new EntityLocation from the given values.
+     *
+     * Note that velocity and poseFlags are NOT copied.
+     */
+    public EntityLocation(World world, double x, double y, double z, float yaw, float pitch, Vector velocity, Set<PoseFlag> poseFlags) {
+        super(world, x, y, z, yaw, pitch);
+        this.velocity = velocity;
+        this.poseFlags = poseFlags;
+
+    }
+
+    public EntityLocation(World world, Vector position, float yaw, float pitch, Vector velocity, Set<PoseFlag> poseFlags) {
+        this(world, position.getX(), position.getY(), position.getZ(), yaw, pitch, velocity, poseFlags);
+    }
+
+    /**
+     * Create a new EntityLocation from the given values.
+     *
+     * Only the position and angles are copied from the location argument,
+     * even if it is another EntityLocation.
+     *
+     * Note that velocity and poseFlags are NOT copied.
+     */
+    public EntityLocation(Location location, Vector velocity, Set<PoseFlag> poseFlags) {
+        this(location.getWorld(), location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch(), velocity, poseFlags);
+    }
+
+    /**
+     * Create a new EntityLocation from the given values, with zero velocity and no {@link PoseFlag}s.
+     */
+    public EntityLocation(World world, double x, double y, double z, float yaw, float pitch) {
+        this(world, x, y, z, yaw, pitch, new Vector(), EnumSet.noneOf(PoseFlag.class));
+    }
+
+    public static EntityLocation coerce(Vector value, EntityLocation defaults) {
+        if(value instanceof EntityLocation) {
+            return (EntityLocation) value;
+        } else if(value instanceof Location) {
+            return new EntityLocation((Location) value, defaults.velocity(), defaults.poseFlags());
+        } else if(value != null) {
+            return new EntityLocation(defaults.getWorld(), value, defaults.getYaw(), defaults.getPitch(), defaults.velocity(), defaults.poseFlags());
+        } else {
+            return null;
+        }
+    }
+
+    public static EntityLocation copyOf(Location location, Vector velocity, Set<PoseFlag> poseFlags) {
+        return new EntityLocation(location, Vector.copyOf(velocity), EnumUtils.copySet(PoseFlag.class, poseFlags));
+    }
+
+    public static EntityLocation copyOf(EntityLocation that) {
+        return copyOf(that, that.velocity(), that.poseFlags());
+    }
+
+    /**
+     * Mutable velocity vector.
+     *
+     * Changes to the returned object are reflected in this {@link EntityLocation},
+     * and vice-versa.
+     */
+    public Vector velocity() {
+        return velocity;
+    }
+
+    /**
+     * A mutable set of {@link PoseFlag}s.
+     *
+     * Changes to the returned object are reflected in this {@link EntityLocation},
+     * and vice-versa.
+     */
+    public Set<PoseFlag> poseFlags() {
+        return poseFlags;
+    }
+
+    @Override
+    public String toString() {
+        return getClass().getSimpleName() +
+               "{world=" + getWorld() +
+               " x=" + getX() +
+               " y=" + getY() +
+               " z=" + getZ() +
+               " pitch=" + getPitch() +
+               " yaw=" + getYaw() +
+               " velocity=" + velocity() +
+               " poseFlags=" + poseFlags() +
+               '}';
+    }
+
+    @Override
+    public boolean equals(Object that) {
+        return this == that || (
+            super.equals(that) &&
+            that instanceof EntityLocation &&
+            this.velocity.equals(((EntityLocation) that).velocity()) &&
+            this.poseFlags.equals(((EntityLocation) that).poseFlags())
+        );
+    }
+
+    @Override
+    public int hashCode() {
+        return Arrays.hashCode(new Object[] {super.hashCode(), velocity, poseFlags});
+    }
+
+    @Override
+    public EntityLocation clone() {
+        // Can't call super.clone(), because we have final fields
+        return copyOf(this);
+    }
+}
diff --git a/src/main/java/org/bukkit/Location.java b/src/main/java/org/bukkit/Location.java
index 89f25d9..91a981d 100644
--- a/src/main/java/org/bukkit/Location.java
+++ b/src/main/java/org/bukkit/Location.java
@@ -481,6 +481,25 @@ public class Location extends Vector implements Cloneable, ConfigurationSerializ
     }
 
     /**
+     * Copy yaw and pitch from the given {@link Location} to this one.
+     * @return this object
+     */
+    public Location copyAngles(Location loc) {
+        this.yaw = loc.getYaw();
+        this.pitch = loc.getPitch();
+        return this;
+    }
+
+    /**
+     * Copy position and angles from the given {@link Location} to this one.
+     * @return this object
+     */
+    public Location copyLocation(Location loc) {
+        super.copy(loc);
+        return copyAngles(loc);
+    }
+
+    /**
      * Zero this location's components. Not world-aware.
      *
      * @see Vector
diff --git a/src/main/java/org/bukkit/PoseFlag.java b/src/main/java/org/bukkit/PoseFlag.java
new file mode 100644
index 0000000..4d8fbee
--- /dev/null
+++ b/src/main/java/org/bukkit/PoseFlag.java
@@ -0,0 +1,41 @@
+package org.bukkit;
+
+import org.bukkit.entity.Entity;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.entity.Player;
+
+public enum PoseFlag {
+    /** @see Entity#isOnGround() */
+    GROUNDED,
+
+    /** @see Entity#isDead() */
+    DEAD,
+
+    /** @see HumanEntity#isSleeping() */
+    SLEEPING,
+
+    /** @see Player#isSneaking() */
+    SNEAKING,
+
+    /** @see Player#isSprinting() */
+    SPRINTING,
+
+    /** @see HumanEntity#isBlocking() */
+    BLOCKING,
+
+    /** @see Player#isDigging() */
+    DIGGING,
+
+    /** @see LivingEntity#isGliding() */
+    GLIDING,
+
+    /** @see Player#isFlying() */
+    FLYING,
+
+    /** @see LivingEntity#isLeashed() */
+    LEASHED,
+
+    /** @see Entity#isInsideVehicle() */
+    RIDING;
+}
diff --git a/src/main/java/org/bukkit/entity/Entity.java b/src/main/java/org/bukkit/entity/Entity.java
index 1fa3059..fa44c2f 100644
--- a/src/main/java/org/bukkit/entity/Entity.java
+++ b/src/main/java/org/bukkit/entity/Entity.java
@@ -1,7 +1,9 @@
 package org.bukkit.entity;
 
+import org.bukkit.EntityLocation;
 import org.bukkit.Location;
 import org.bukkit.EntityEffect;
+import org.bukkit.PoseFlag;
 import org.bukkit.Server;
 import org.bukkit.World;
 import org.bukkit.Physical;
@@ -11,6 +13,7 @@ import org.bukkit.util.Cuboid;
 import org.bukkit.util.Vector;
 
 import java.util.List;
+import java.util.Set;
 import java.util.UUID;
 import org.bukkit.command.CommandSender;
 import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
@@ -27,6 +30,8 @@ public interface Entity extends Metadatable, CommandSender, Physical {
      */
     public Location getLocation();
 
+    EntityLocation getEntityLocation();
+
     /**
      * Stores the entity's current position in the provided Location object.
      * <p>
@@ -39,6 +44,11 @@ public interface Entity extends Metadatable, CommandSender, Physical {
     public Location getLocation(Location loc);
 
     /**
+     * The set of {@link PoseFlag}s describing this entity's current state
+     */
+    Set<PoseFlag> getPoseFlags();
+
+    /**
      * Sets this entity's velocity
      *
      * @param velocity New velocity to travel with
diff --git a/src/main/java/org/bukkit/event/player/PlayerMoveEvent.java b/src/main/java/org/bukkit/event/player/PlayerMoveEvent.java
index 7687667..9445a7c 100644
--- a/src/main/java/org/bukkit/event/player/PlayerMoveEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerMoveEvent.java
@@ -1,6 +1,7 @@
 package org.bukkit.event.player;
 
 import com.google.common.base.Preconditions;
+import org.bukkit.EntityLocation;
 import org.bukkit.Location;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
@@ -12,15 +13,21 @@ import org.bukkit.event.HandlerList;
 public class PlayerMoveEvent extends PlayerActionBase implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean cancel = false;
-    private Location from;
-    private Location to;
+    private EntityLocation from;
+    private EntityLocation to;
 
-    public PlayerMoveEvent(final Player player, final Location from, final Location to) {
+    public PlayerMoveEvent(final Player player, final EntityLocation from, final EntityLocation to) {
         super(player);
         this.from = from;
         this.to = to;
     }
 
+    public PlayerMoveEvent(final Player player, final Location from, final Location to) {
+        this(player,
+             EntityLocation.coerce(from, player.getEntityLocation()),
+             EntityLocation.coerce(to, player.getEntityLocation()));
+    }
+
     /**
      * Gets the cancellation state of this event. A cancelled event will not
      * be executed in the server, but will still pass to other plugins
@@ -58,6 +65,10 @@ public class PlayerMoveEvent extends PlayerActionBase implements Cancellable {
         return from;
     }
 
+    public EntityLocation getEntityFrom() {
+        return from;
+    }
+
     /**
      * Sets the location to mark as where the player moved from
      *
@@ -65,7 +76,7 @@ public class PlayerMoveEvent extends PlayerActionBase implements Cancellable {
      */
     public void setFrom(Location from) {
         validateLocation(from);
-        this.from = from;
+        this.from = EntityLocation.coerce(from, this.from);
     }
 
     /**
@@ -77,6 +88,10 @@ public class PlayerMoveEvent extends PlayerActionBase implements Cancellable {
         return to;
     }
 
+    public EntityLocation getEntityTo() {
+        return to;
+    }
+
     /**
      * Sets the location that this player will move to
      *
@@ -84,7 +99,7 @@ public class PlayerMoveEvent extends PlayerActionBase implements Cancellable {
      */
     public void setTo(Location to) {
         validateLocation(to);
-        this.to = to;
+        this.to = EntityLocation.coerce(to, this.to);
     }
 
     private void validateLocation(Location loc) {
diff --git a/src/main/java/org/bukkit/util/EnumUtils.java b/src/main/java/org/bukkit/util/EnumUtils.java
new file mode 100644
index 0000000..d064568
--- /dev/null
+++ b/src/main/java/org/bukkit/util/EnumUtils.java
@@ -0,0 +1,22 @@
+package org.bukkit.util;
+
+import java.util.Collection;
+import java.util.EnumSet;
+import java.util.Set;
+
+public final class EnumUtils {
+    private EnumUtils() {}
+
+    /**
+     * Create a new {@link EnumSet} of the given type, copying the initial
+     * contents from the given set.
+     *
+     * Unlike {@link EnumSet#copyOf(Collection)}, this method always works,
+     * even if the given set is empty, and is not another {@link EnumSet}.
+     */
+    public static <E extends Enum<E>> EnumSet<E> copySet(Class<E> type, Set<E> set) {
+        final EnumSet<E> copy = EnumSet.noneOf(type);
+        copy.addAll(set);
+        return copy;
+    }
+}
-- 
1.9.0

